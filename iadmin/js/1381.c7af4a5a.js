"use strict";(globalThis["webpackChunkadmin_quasar"]=globalThis["webpackChunkadmin_quasar"]||[]).push([[1381],{71381:(e,t,s)=>{function i(e,t,s,i,l,a){return null}s.r(t),s.d(t,{default:()=>o});s(10239);var l=s(99526)["A"];const a={data(){return{crudId:this.$uid()}},computed:{crudData(){return{crudId:this.crudId,entityName:l("main.quser.entityNames.role"),apiRoute:"apiRoutes.quser.roles",permission:"profile.role",extraFormFields:"Iprofile.crud-fields.roles",create:{title:this.$tr("iprofile.cms.newRole")},read:{columns:[{name:"id",label:this.$tr("isite.cms.form.id"),field:"id",style:"width: 50px"},{name:"name",label:this.$tr("isite.cms.form.name"),field:"name",align:"rigth"},{name:"slug",label:this.$tr("isite.cms.form.slug"),field:"slug",align:"left"},{name:"workSpace",label:this.$tr("isite.cms.label.workSpace"),field:"settings",align:"left",format:e=>e.workSpace||"-"},{name:"form",label:this.$tr("isite.cms.label.form"),field:"form",align:"left",format:e=>e?e.title:"-"},{name:"created_at",label:this.$tr("isite.cms.form.createdAt"),field:"createdAt",align:"left",format:e=>e?this.$trd(e):"-"},{name:"actions",label:this.$tr("isite.cms.form.actions"),align:"left"}],requestParams:{include:""}},update:{title:this.$tr("iprofile.cms.updateRole"),requestParams:{include:""}},delete:!0,formLeft:{id:{value:null},userId:{value:this.$store.state.quserAuth.userId},name:{value:"",type:"input",props:{label:`${this.$tr("isite.cms.form.name")}*`,rules:[e=>!!e||this.$tr("isite.cms.message.fieldRequired")]},validateField:{apiRoute:"apiRoutes.quser.roles",crudId:this.crudId,requestParams:{filter:{field:"name"}}}},slug:{value:"",type:"input",props:{label:`${this.$tr("isite.cms.form.slug")}*`,rules:[e=>!!e||this.$tr("isite.cms.message.fieldRequired")]}},formId:{type:"crud",props:{crudType:"select",crudData:s.e(3116).then(s.bind(s,73116)),crudProps:{label:`${this.$tr("isite.cms.label.form")}`},config:{clearable:!0,options:{label:"title",value:"id"}}}},permissions:{type:"permissions",value:{}}},formRight:{assignedRoles:{value:[],type:"select",fakeFieldName:"settings",props:{label:"Can manage users with following roles",multiple:!0,useChips:!0},loadOptions:{apiRoute:"apiRoutes.quser.roles",select:{label:"name",id:"id"}}},assignedDepartments:{value:[],type:"select",fakeFieldName:"settings",props:{label:"Can manage departments under following departments",multiple:!0,useChips:!0},loadOptions:{apiRoute:"apiRoutes.quser.departments",requestParams:{include:""}}},incognitoProfile:{value:0,type:"select",fakeFieldName:"settings",props:{label:this.$tr("iprofile.cms.label.incognitoProfile"),options:[{label:this.$tr("isite.cms.label.yes"),value:1},{label:this.$tr("isite.cms.label.no"),value:0}]}},workSpace:{value:"iadmin",type:"select",fakeFieldName:"settings",props:{label:this.$tr("isite.cms.label.workSpace"),options:[{label:"Iadmin",value:"iadmin"},{label:"Ipanel",value:"ipanel"}]}}}}},crudInfo(){return this.$store.state.qcrudComponent.component[this.crudId]||{}}},methods:{getSettingsOptions(){return new Promise(((e,t)=>{let s={params:{filter:{allTranslations:!0}}};this.$crud.index("apiRoutes.qsite.settings",s).then((t=>{let s=[],i=t.data;for(const e in i){let t=[],l=i[e];for(const e in l){let s=l[e];t.push({id:s.name,label:e})}s.push({id:e,label:e,children:t})}e(s)})).catch((e=>{this.$apiResponse.handleError(e,(()=>{}))}))}))}}};var r=s(12807);const n=(0,r.A)(a,[["render",i]]),o=n}}]);